// <auto-generated />
using System;
using MaintenanceSchedulingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaintenanceSchedulingApp.Migrations
{
    [DbContext(typeof(MaintenanceSchedulerContext))]
    partial class MaintenanceSchedulerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MaintenanceSchedulingApp.Models.Assets", b =>
                {
                    b.Property<int>("AssetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetsId"));

                    b.Property<DateTime>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaintenanceFrequency")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AssetsId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("MaintenanceSchedulingApp.Models.MaintenanceHistory", b =>
                {
                    b.Property<int>("MaintenanceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaintenanceHistoryId"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("TechnicianName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MaintenanceHistoryId");

                    b.HasIndex("TaskId");

                    b.ToTable("MaintenanceHistory");
                });

            modelBuilder.Entity("MaintenanceSchedulingApp.Models.MaintenanceTask", b =>
                {
                    b.Property<int>("MaintenanceTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaintenanceTaskId"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<int>("AssetsId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MaintenanceTaskId");

                    b.HasIndex("AssetsId");

                    b.ToTable("MaintenanceTask");
                });

            modelBuilder.Entity("MaintenanceSchedulingApp.Models.MaintenanceHistory", b =>
                {
                    b.HasOne("MaintenanceSchedulingApp.Models.MaintenanceTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MaintenanceSchedulingApp.Models.MaintenanceTask", b =>
                {
                    b.HasOne("MaintenanceSchedulingApp.Models.Assets", "Assets")
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
